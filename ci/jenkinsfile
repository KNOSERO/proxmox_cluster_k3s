pipeline {
    agent {
        label 'home'
    }

    stages {
        stage('Init submodules') {
            steps {
                sh '''
                    git config --global url."https://github.com/".insteadOf "git@github.com:"
                    git submodule sync --recursive
                    git submodule update --init --recursive
                '''
            }
        }

        stage('Konfiguracja kluczy SSH') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'id_home_lab', keyFileVariable: 'SSH_KEY')]) {
                    sh '''
                        mkdir -p /root/.ssh
                        cp "$SSH_KEY" /root/.ssh/id_home_lab
                        chmod 600 /root/.ssh/id_home_lab
                       '''
                }
            }
        }

        stage('Prepere Config') {
            steps {
                withCredentials([file(credentialsId: 'env-terraform-proxmox-k3s', variable: 'ENV_TERRAFORM'),
                                 string(credentialsId: 'user-cluster-k3s', variable: 'USER_CLUSTER'),
                                 string(credentialsId: 'proxmox-access', variable: 'USER_PROXMOX')]) {
                    script {
                        writeFile file: './terraform/env.tfvars', text: ENV_TERRAFORM

                        def variablesTerraform = "containers = ${params.CONFIG_TERRAFORM}\n\n" +
                                                 "ci_user = \"${USER_CLUSTER}\"\n\n" +
                                                 "pm_user = \"${USER_PROXMOX}\""

                        writeFile file: './terraform/variables.tfvars', text: variablesTerraform
                    }
                }
            }
        }

        stage('Import Terraform State') {
            steps {
                script {
                    def arr = readJSON text: params.CONFIG_TERRAFORM
                    arr.each { obj -> echo "Vmid  = ${obj.vmid}, name = ${obj.name}"}
                }
            }
        }

        stage('Destroy Custer') {
            when {
                expression { params.TASK == 'destroy' }
            }
            steps {
                echo "Deployuję DNS"
            }
        }

        stage('Apply Custer') {
            when {
                expression { params.TASK == 'apply' }
            }
            steps {
                echo "Deployuję Grafanę"
            }
        }
    }
}