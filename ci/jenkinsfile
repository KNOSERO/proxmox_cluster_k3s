pipeline {
    agent {
        label 'home'
    }

    stages {
        stage('Init submodules') {
            steps {
                sh '''
                    git config --global url."https://github.com/".insteadOf "git@github.com:"
                    git submodule sync --recursive
                    git submodule update --init --recursive
                '''
            }
        }

        stage('Konfiguracja kluczy SSH') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'id_home_lab', keyFileVariable: 'SSH_KEY'),
                                 sshUserPrivateKey(credentialsId: 'id_home_lab_pub', keyFileVariable: 'SSH_KEY_PUB')]) {
                    sh '''
                        mkdir -p /root/.ssh
                        cp "$SSH_KEY" /root/.ssh/id_home_lab
                        cp "$SSH_KEY_PUB" /root/.ssh/id_home_lab.pub
                        chmod 600 /root/.ssh/id_home_lab
                        chmod 600 /root/.ssh/id_home_lab.pub
                    '''
                }
            }
        }

        stage('Prepere Config') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'user-cluster-k3s', variable: 'USER_CLUSTER'),
                                     string(credentialsId: 'proxmox-access', variable: 'USER_PROXMOX')]) {
                        def variablesTerraform = "containers = ${params.CONFIG_TERRAFORM}\n\n" +
                                                 "ci_user = \"${USER_CLUSTER}\"\n\n" +
                                                 "pm_user = \"${USER_PROXMOX}\""
                        writeFile file: './terraform/variables.tfvars', text: variablesTerraform

                    }
                    withCredentials([file(credentialsId: 'env-terraform-proxmox-k3s', variable: 'ENV_TERRAFORM')]) {
                        sh '''
                            cp "\$ENV_TERRAFORM" "./terraform/env.tfvars"
                        '''
                    }
                    def json = params.CONFIG_TERRAFORM.replaceAll("=", ":").replaceAll("([0-9\"])(\\s*\\n\\s*[a-zA-Z_])", '$1,\n$2')
                    def arr = readJSON text: json

                    def ip = arr[0].ip_address.replaceAll("/24", "")
                    def ansibleInventory = "[MAIN]\n" +
                                           "${arr[0].name} ansible_host=${ip} ansible_user=${USER_CLUSTER} ansible_ssh_private_key_file=/root/.ssh/id_home_lab\n"

                    def masterAnsibleInventory = "[MASTER]\n"

                    def workerAnsibleInventory = "[WORKER]\n"
                    arr.each { obj ->
                        def ip = obj.ip_address.replaceAll("/24", "")
                        if (obj.type == "master") {
                            masterAnsibleInventory = masterAnsibleInventory
                                                   + "${obj.name} ansible_host=${ip} ansible_user=${USER_CLUSTER} ansible_ssh_private_key_file=/root/.ssh/id_home_lab\n"
                        } else {
                            workerAnsibleInventory = workerAnsibleInventory
                                                   + "${obj.name} ansible_host=${ip} ansible_user=${USER_CLUSTER} ansible_ssh_private_key_file=/root/.ssh/id_home_lab\n"
                        }
                    }
                    ansibleInventory = ansibleInventory + masterAnsibleInventory + workerAnsibleInventory

                    echo "${ansibleInventory}"
                    writeFile file: './ansible/inventory.ini', text: ansibleInventory
                }
            }
        }

        stage('Import Terraform State') {
            steps {
                script {
                    def json = params.CONFIG_TERRAFORM.replaceAll("=", ":").replaceAll("([0-9\"])(\\s*\\n\\s*[a-zA-Z_])", '$1,\n$2')
                    def arr = readJSON text: json

                    ansiColor('xterm') {
                        dir('terraform') {
                            sh '''
                                terraform init -upgrade
                            '''
                            arr.each { obj ->
                                sh """
                                  terraform import \
                                  terraform import \
                                    -var-file=variables.tfvars \
                                    -var-file=env.tfvars \
                                    'proxmox_vm_qemu.ubuntu_vm[\"${obj.name}\"]' \
                                    '${obj.target_node}/qemu/${obj.vmid}' || true
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Destroy Custer') {
            when {
                expression { params.TASK == 'destroy' }
            }
            steps {
                ansiColor('xterm') {
                    dir('terraform') {
                        sh '''
                            terraform destroy -var-file=variables.tfvars -var-file=env.tfvars -auto-approve
                        '''
                    }
                }
            }
        }

        stage('Apply Custer') {
            when {
                expression { params.TASK == 'apply' }
            }
            steps {
                ansiColor('xterm') {
                    dir('terraform') {
                        sh '''
                            terraform plan -var-file=variables.tfvars -var-file=env.tfvars
                            terraform apply -var-file=variables.tfvars -var-file=env.tfvars -auto-approve
                        '''
                    }
                }
            }
        }

        stage('Install cluster K3s') {
            when {
                expression { params.TASK == 'apply' }
            }
            environment {
                ANSIBLE_HOST_KEY_CHECKING = 'False'
            }
            steps {
                ansiColor('xterm') {
                    dir('ansible') {
                        sh '''
                            ansible-playbook -i inventory.ini playbook.yml
                        '''
                    }
                }
            }
        }
    }
}