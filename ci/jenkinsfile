pipeline {
    agent {
        label 'home'
    }

    stages {
        stage('Init submodules') {
            steps {
                sh '''
                    git config --global url."https://github.com/".insteadOf "git@github.com:"
                    git submodule sync --recursive
                    git submodule update --init --recursive
                '''
            }
        }

        stage('Konfiguracja kluczy SSH') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'id_home_lab', keyFileVariable: 'SSH_KEY')]) {
                    sh '''
                        mkdir -p /root/.ssh
                        cp "$SSH_KEY" /root/.ssh/id_home_lab
                        chmod 600 /root/.ssh/id_home_lab
                       '''
                }
            }
        }

        stage('Prepere Config') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'user-cluster-k3s', variable: 'USER_CLUSTER'),
                                     string(credentialsId: 'proxmox-access', variable: 'USER_PROXMOX')]) {
                        writeFile file: '', text: ENV_TERRAFORM

                        def variablesTerraform = "containers = ${params.CONFIG_TERRAFORM}\n\n" +
                                                 "ci_user = \"${USER_CLUSTER}\"\n\n" +
                                                 "pm_user = \"${USER_PROXMOX}\""
                        writeFile file: './terraform/variables.tfvars', text: variablesTerraform

                    }
                    withCredentials([file(credentialsId: 'env-terraform-proxmox-k3s', variable: 'ENV_TERRAFORM')]) {
                        sh """
                            cp "\$ENV_TERRAFORM" "./terraform/env.tfvars"
                        """
                    }
                }
            }
        }

        stage('Import Terraform State') {
            steps {
                script {
                    def jsonLike = params.CONFIG_TERRAFORM.replaceAll("=", ":").replaceAll("([0-9\"])(\\s*\\n\\s*[a-zA-Z_])", '$1,\n$2')
                    def arr = readJSON text: jsonLike

                    dir('terraform') {
                        arr.each { obj ->
                            sh """
                              terraform import \
                                -var-file=variables.tfvars \
                                -var-file=env.tfvars \
                                'proxmox_vm_qemu.ubuntu_vm[\"${obj.name}\"]' \
                                '${obj.target_node}/qemu/${obj.vmid}'
                            """
                        }
                    }
                }
            }
        }

        stage('Destroy Custer') {
            when {
                expression { params.TASK == 'destroy' }
            }
            steps {
                echo "Deployuję DNS"
            }
        }

        stage('Apply Custer') {
            when {
                expression { params.TASK == 'apply' }
            }
            steps {
                echo "Deployuję Grafanę"
            }
        }
    }
}